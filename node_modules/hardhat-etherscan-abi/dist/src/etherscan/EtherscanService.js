"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAbi = void 0;
const plugins_1 = require("hardhat/plugins");
const pluginName = "hardhat-etherscan-abi";
async function getAbi(url, req) {
    const parameters = new URLSearchParams(Object.assign({}, req));
    const urlWithQuery = new URL(url);
    urlWithQuery.search = parameters.toString();
    const { default: fetch } = await Promise.resolve().then(() => __importStar(require("node-fetch")));
    let response;
    try {
        response = await fetch(urlWithQuery);
        if (!response.ok) {
            // This could be always interpreted as JSON if there were any such guarantee in the Etherscan API.
            const responseText = await response.text();
            const message = `The HTTP server response is not ok. Status code: ${response.status} Response text: ${responseText}`;
            throw new plugins_1.NomicLabsHardhatPluginError(pluginName, message);
        }
    }
    catch (error) {
        throw new plugins_1.NomicLabsHardhatPluginError(pluginName, `Failure fetching ABI from Etherscan.
Endpoint URL: ${urlWithQuery}
Reason: ${error.message}`, error);
    }
    const etherscanResponse = new EtherscanAbiResponse(await response.json());
    if (etherscanResponse.isRatelimit()) {
        throw new plugins_1.NomicLabsHardhatPluginError(pluginName, `Max rate limit reached, please provide an Etherscan API token via hardhat config.
E.g.: { [...], etherscan: { apiKey: 'an API key' }, [...] }
See https://etherscan.io/apis`);
    }
    if (!etherscanResponse.isOk()) {
        throw new plugins_1.NomicLabsHardhatPluginError(pluginName, `The Etherscan API responded with a failure status.
Reason: ${etherscanResponse.result}`);
    }
    try {
        return JSON.parse(etherscanResponse.result);
    }
    catch (error) {
        throw new plugins_1.NomicLabsHardhatPluginError(pluginName, `Failure parsing ABI JSON from Etherscan.
Reason: ${error.message}`, error);
    }
}
exports.getAbi = getAbi;
class EtherscanAbiResponse {
    constructor(response) {
        this.status = parseInt(response.status, 10);
        this.result = response.result;
    }
    isRatelimit() {
        return this.result === "Max rate limit reached, please use API Key for higher rate limit";
    }
    isOk() {
        return this.status === 1;
    }
}
exports.default = EtherscanAbiResponse;
//# sourceMappingURL=EtherscanService.js.map